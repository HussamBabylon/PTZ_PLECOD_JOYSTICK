

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Feb 21 18:00:32 2023

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F876A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 2.20
    16                           ; Generated 12/02/2020 GMT
    17                           ; 
    18                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F876A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  008C                     	;# 
    87  008D                     	;# 
    88  008E                     	;# 
    89  0091                     	;# 
    90  0092                     	;# 
    91  0093                     	;# 
    92  0094                     	;# 
    93  0098                     	;# 
    94  0099                     	;# 
    95  009C                     	;# 
    96  009D                     	;# 
    97  009E                     	;# 
    98  009F                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  010E                     	;# 
   102  010F                     	;# 
   103  018C                     	;# 
   104  018D                     	;# 
   105  0000                     	;# 
   106  0001                     	;# 
   107  0002                     	;# 
   108  0003                     	;# 
   109  0004                     	;# 
   110  0005                     	;# 
   111  0006                     	;# 
   112  0007                     	;# 
   113  000A                     	;# 
   114  000B                     	;# 
   115  000C                     	;# 
   116  000D                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0014                     	;# 
   125  0015                     	;# 
   126  0015                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0086                     	;# 
   141  0087                     	;# 
   142  008C                     	;# 
   143  008D                     	;# 
   144  008E                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  010C                     	;# 
   156  010D                     	;# 
   157  010E                     	;# 
   158  010F                     	;# 
   159  018C                     	;# 
   160  018D                     	;# 
   161  001A                     _RCREG	set	26
   162  0030                     _RB0	set	48
   163  0065                     _RCIF	set	101
   164  00C4                     _CREN	set	196
   165  005F                     _GIE	set	95
   166  005E                     _PEIE	set	94
   167  00C7                     _SPEN	set	199
   168  0034                     _RB4	set	52
   169  0033                     _RB3	set	51
   170  0031                     _RB1	set	49
   171  0032                     _RB2	set	50
   172  0099                     _SPBRG	set	153
   173  0086                     _TRISBbits	set	134
   174  0465                     _RCIE	set	1125
   175  043F                     _TRISC7	set	1087
   176  043E                     _TRISC6	set	1086
   177  04C4                     _SYNC	set	1220
   178  04C2                     _BRGH	set	1218
   179                           
   180                           	psect	cinit
   181  0011                     start_initialization:	
   182                           ; #config settings
   183                           
   184  0011                     __initialization:
   185                           
   186                           ; Clear objects allocated to COMMON
   187  0011  01F7               	clrf	__pbssCOMMON& (0+127)
   188  0012  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   189  0013  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   190                           
   191                           ; Clear objects allocated to BANK0
   192  0014  1283               	bcf	3,5	;RP0=0, select bank0
   193  0015  1303               	bcf	3,6	;RP1=0, select bank0
   194  0016  01A0               	clrf	__pbssBANK0& (0+127)
   195  0017  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   196  0018  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   197  0019  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   198  001A  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   199  001B  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   200  001C  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   201  001D                     end_of_initialization:	
   202                           ;End of C runtime variable initialization code
   203                           
   204  001D                     __end_of__initialization:
   205  001D  0183               	clrf	3
   206  001E  120A  118A  2821   	ljmp	_main	;jump to C main() function
   207                           
   208                           	psect	bssCOMMON
   209  0077                     __pbssCOMMON:
   210  0077                     _UART_Buffer:
   211  0077                     	ds	1
   212  0078                     _byteNumber:
   213  0078                     	ds	1
   214  0079                     _Data:
   215  0079                     	ds	1
   216                           
   217                           	psect	bssBANK0
   218  0020                     __pbssBANK0:
   219  0020                     _byteReceived:
   220  0020                     	ds	7
   221                           
   222                           	psect	cstackCOMMON
   223  0070                     __pcstackCOMMON:
   224  0070                     ?_UART_RX_Init:
   225  0070                     ?_main:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0070                     ?_ISR:	
   229                           ; 1 bytes @ 0x0
   230                           
   231  0070                     ??_ISR:	
   232                           ; 1 bytes @ 0x0
   233                           
   234                           
   235                           ; 1 bytes @ 0x0
   236  0070                     	ds	4
   237  0074                     ??_UART_RX_Init:
   238  0074                     ??_main:	
   239                           ; 1 bytes @ 0x4
   240                           
   241                           
   242                           ; 1 bytes @ 0x4
   243  0074                     	ds	3
   244                           
   245                           	psect	maintext
   246  0021                     __pmaintext:	
   247 ;;
   248 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   249 ;;
   250 ;; *************** function _main *****************
   251 ;; Defined at:
   252 ;;		line 29 in file "Main.c"
   253 ;; Parameters:    Size  Location     Type
   254 ;;		None
   255 ;; Auto vars:     Size  Location     Type
   256 ;;		None
   257 ;; Return value:  Size  Location     Type
   258 ;;                  1    wreg      void 
   259 ;; Registers used:
   260 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   261 ;; Tracked objects:
   262 ;;		On entry : B00/0
   263 ;;		On exit  : 0/0
   264 ;;		Unchanged: 0/0
   265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   266 ;;      Params:         0       0       0       0       0
   267 ;;      Locals:         0       0       0       0       0
   268 ;;      Temps:          3       0       0       0       0
   269 ;;      Totals:         3       0       0       0       0
   270 ;;Total ram usage:        3 bytes
   271 ;; Hardware stack levels required when called:    2
   272 ;; This function calls:
   273 ;;		_UART_RX_Init
   274 ;; This function is called by:
   275 ;;		Startup code after reset
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           
   280                           ;psect for function _main
   281  0021                     _main:
   282  0021                     l744:	
   283                           ;incstack = 0
   284                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   285                           
   286                           
   287                           ;Main.c: 32: UART_RX_Init();
   288  0021  120A  118A  208D  120A  118A  	fcall	_UART_RX_Init
   289  0026                     l746:
   290                           
   291                           ;Main.c: 33: _delay((unsigned long)((100)*(8000000/4000.0)));
   292  0026  3002               	movlw	2
   293  0027  00F6               	movwf	??_main+2
   294  0028  3004               	movlw	4
   295  0029  00F5               	movwf	??_main+1
   296  002A  30BA               	movlw	186
   297  002B  00F4               	movwf	??_main
   298  002C                     u77:
   299  002C  0BF4               	decfsz	??_main,f
   300  002D  282C               	goto	u77
   301  002E  0BF5               	decfsz	??_main+1,f
   302  002F  282C               	goto	u77
   303  0030  0BF6               	decfsz	??_main+2,f
   304  0031  282C               	goto	u77
   305  0032  0000               	nop
   306  0033                     l748:
   307                           
   308                           ;Main.c: 38: TRISBbits.TRISB0 = 0;
   309  0033  1683               	bsf	3,5	;RP0=1, select bank1
   310  0034  1303               	bcf	3,6	;RP1=0, select bank1
   311  0035  1006               	bcf	6,0	;volatile
   312  0036                     l750:
   313                           
   314                           ;Main.c: 39: TRISBbits.TRISB1 = 0;
   315  0036  1086               	bcf	6,1	;volatile
   316  0037                     l752:
   317                           
   318                           ;Main.c: 40: TRISBbits.TRISB2 = 0;
   319  0037  1106               	bcf	6,2	;volatile
   320  0038                     l754:
   321                           
   322                           ;Main.c: 41: TRISBbits.TRISB3 = 0;
   323  0038  1186               	bcf	6,3	;volatile
   324  0039                     l756:
   325                           
   326                           ;Main.c: 42: TRISBbits.TRISB4 = 0;
   327  0039  1206               	bcf	6,4	;volatile
   328  003A                     l758:
   329                           
   330                           ;Main.c: 45: {;Main.c: 47: if (byteNumber > 6)
   331  003A  3007               	movlw	7
   332  003B  0278               	subwf	_byteNumber,w
   333  003C  1C03               	skipc
   334  003D  283F               	goto	u41
   335  003E  2840               	goto	u40
   336  003F                     u41:
   337  003F  283A               	goto	l758
   338  0040                     u40:
   339  0040                     l760:
   340                           
   341                           ;Main.c: 48: {;Main.c: 50: byteNumber = 0;
   342  0040  01F8               	clrf	_byteNumber
   343  0041                     l762:
   344                           
   345                           ;Main.c: 51: Data = byteReceived[3];
   346  0041  1283               	bcf	3,5	;RP0=0, select bank0
   347  0042  1303               	bcf	3,6	;RP1=0, select bank0
   348  0043  0823               	movf	_byteReceived+3,w
   349  0044  00F4               	movwf	??_main
   350  0045  0874               	movf	??_main,w
   351  0046  00F9               	movwf	_Data
   352                           
   353                           ;Main.c: 52: switch(Data)
   354  0047  2855               	goto	l766
   355  0048                     l56:	
   356                           ;Main.c: 53: {;Main.c: 54: case 0x00 :RB2 = 0; RB1 = 0; RB3 = 0; RB4 = 0; break;
   357                           
   358  0048  1106               	bcf	6,2	;volatile
   359  0049  1086               	bcf	6,1	;volatile
   360  004A  1186               	bcf	6,3	;volatile
   361  004B  1206               	bcf	6,4	;volatile
   362  004C  283A               	goto	l758
   363  004D                     l58:	
   364                           ;Main.c: 55: case 0x02 : RB2 = 1; break;
   365                           
   366  004D  1506               	bsf	6,2	;volatile
   367  004E  283A               	goto	l758
   368  004F                     l59:	
   369                           ;Main.c: 56: case 0x04 : RB1 =1; break;
   370                           
   371  004F  1486               	bsf	6,1	;volatile
   372  0050  283A               	goto	l758
   373  0051                     l60:	
   374                           ;Main.c: 57: case 0x010 : RB4 = 1; break;
   375                           
   376  0051  1606               	bsf	6,4	;volatile
   377  0052  283A               	goto	l758
   378  0053                     l61:	
   379                           ;Main.c: 58: case 0x08 : RB3 = 1; break;
   380                           
   381  0053  1586               	bsf	6,3	;volatile
   382  0054  283A               	goto	l758
   383  0055                     l766:
   384  0055  0879               	movf	_Data,w
   385                           
   386                           ; Switch size 1, requested type "simple"
   387                           ; Number of cases is 5, Range of values is 0 to 16
   388                           ; switch strategies available:
   389                           ; Name         Instructions Cycles
   390                           ; simple_byte           16     9 (average)
   391                           ; direct_byte           59     8 (fixed)
   392                           ; jumptable            260     6 (fixed)
   393                           ;	Chosen strategy is simple_byte
   394  0056  3A00               	xorlw	0	; case 0
   395  0057  1903               	skipnz
   396  0058  2848               	goto	l56
   397  0059  3A02               	xorlw	2	; case 2
   398  005A  1903               	skipnz
   399  005B  284D               	goto	l58
   400  005C  3A06               	xorlw	6	; case 4
   401  005D  1903               	skipnz
   402  005E  284F               	goto	l59
   403  005F  3A0C               	xorlw	12	; case 8
   404  0060  1903               	skipnz
   405  0061  2853               	goto	l61
   406  0062  3A18               	xorlw	24	; case 16
   407  0063  1903               	skipnz
   408  0064  2851               	goto	l60
   409  0065  283A               	goto	l758
   410  0066  120A  118A  280E   	ljmp	start
   411  0069                     __end_of_main:
   412                           
   413                           	psect	text1
   414  008D                     __ptext1:	
   415 ;; *************** function _UART_RX_Init *****************
   416 ;; Defined at:
   417 ;;		line 67 in file "Main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;		None
   420 ;; Auto vars:     Size  Location     Type
   421 ;;		None
   422 ;; Return value:  Size  Location     Type
   423 ;;                  1    wreg      void 
   424 ;; Registers used:
   425 ;;		wreg
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   431 ;;      Params:         0       0       0       0       0
   432 ;;      Locals:         0       0       0       0       0
   433 ;;      Temps:          0       0       0       0       0
   434 ;;      Totals:         0       0       0       0       0
   435 ;;Total ram usage:        0 bytes
   436 ;; Hardware stack levels used:    1
   437 ;; Hardware stack levels required when called:    1
   438 ;; This function calls:
   439 ;;		Nothing
   440 ;; This function is called by:
   441 ;;		_main
   442 ;; This function uses a non-reentrant model
   443 ;;
   444                           
   445                           
   446                           ;psect for function _UART_RX_Init
   447  008D                     _UART_RX_Init:
   448  008D                     l724:	
   449                           ;incstack = 0
   450                           ; Regs used in _UART_RX_Init: [wreg]
   451                           
   452                           
   453                           ;Main.c: 69: BRGH = 0;
   454  008D  1683               	bsf	3,5	;RP0=1, select bank1
   455  008E  1303               	bcf	3,6	;RP1=0, select bank1
   456  008F  1118               	bcf	24,2	;volatile
   457  0090                     l726:
   458                           
   459                           ;Main.c: 70: SPBRG = 51;
   460  0090  3033               	movlw	51
   461  0091  0099               	movwf	25	;volatile
   462  0092                     l728:
   463                           
   464                           ;Main.c: 72: SYNC = 0;
   465  0092  1218               	bcf	24,4	;volatile
   466  0093                     l730:
   467                           
   468                           ;Main.c: 73: SPEN = 1;
   469  0093  1283               	bcf	3,5	;RP0=0, select bank0
   470  0094  1303               	bcf	3,6	;RP1=0, select bank0
   471  0095  1798               	bsf	24,7	;volatile
   472  0096                     l732:
   473                           
   474                           ;Main.c: 75: TRISC6 = 1;
   475  0096  1683               	bsf	3,5	;RP0=1, select bank1
   476  0097  1303               	bcf	3,6	;RP1=0, select bank1
   477  0098  1707               	bsf	7,6	;volatile
   478  0099                     l734:
   479                           
   480                           ;Main.c: 76: TRISC7 = 1;
   481  0099  1787               	bsf	7,7	;volatile
   482  009A                     l736:
   483                           
   484                           ;Main.c: 78: RCIE = 1;
   485  009A  168C               	bsf	12,5	;volatile
   486  009B                     l738:
   487                           
   488                           ;Main.c: 79: PEIE = 1;
   489  009B  170B               	bsf	11,6	;volatile
   490  009C                     l740:
   491                           
   492                           ;Main.c: 80: GIE = 1;
   493  009C  178B               	bsf	11,7	;volatile
   494  009D                     l742:
   495                           
   496                           ;Main.c: 82: CREN = 1;
   497  009D  1283               	bcf	3,5	;RP0=0, select bank0
   498  009E  1303               	bcf	3,6	;RP1=0, select bank0
   499  009F  1618               	bsf	24,4	;volatile
   500  00A0                     l67:
   501  00A0  0008               	return
   502  00A1                     __end_of_UART_RX_Init:
   503                           
   504                           	psect	text2
   505  0069                     __ptext2:	
   506 ;; *************** function _ISR *****************
   507 ;; Defined at:
   508 ;;		line 84 in file "Main.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   522 ;;      Params:         0       0       0       0       0
   523 ;;      Locals:         0       0       0       0       0
   524 ;;      Temps:          4       0       0       0       0
   525 ;;      Totals:         4       0       0       0       0
   526 ;;Total ram usage:        4 bytes
   527 ;; Hardware stack levels used:    1
   528 ;; This function calls:
   529 ;;		Nothing
   530 ;; This function is called by:
   531 ;;		Interrupt level 1
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           
   536                           ;psect for function _ISR
   537  0069                     _ISR:
   538  0069                     i1l768:
   539                           
   540                           ;Main.c: 86: if (RCIF == 1)
   541  0069  1283               	bcf	3,5	;RP0=0, select bank0
   542  006A  1303               	bcf	3,6	;RP1=0, select bank0
   543  006B  1E8C               	btfss	12,5	;volatile
   544  006C  286E               	goto	u5_21
   545  006D  286F               	goto	u5_20
   546  006E                     u5_21:
   547  006E  2884               	goto	i1l74
   548  006F                     u5_20:
   549  006F                     i1l770:
   550                           
   551                           ;Main.c: 87: {;Main.c: 88: RB0 = ~RB0;
   552  006F  3001               	movlw	1
   553  0070  0686               	xorwf	6,f
   554  0071                     i1l772:
   555                           
   556                           ;Main.c: 89: byteReceived[byteNumber++] = RCREG;
   557  0071  081A               	movf	26,w	;volatile
   558  0072  00F0               	movwf	??_ISR
   559  0073  0878               	movf	_byteNumber,w
   560  0074  3E20               	addlw	(low (_byteReceived| 0))& (0+255)
   561  0075  0084               	movwf	4
   562  0076  0870               	movf	??_ISR,w
   563  0077  1383               	bcf	3,7	;select IRP bank0
   564  0078  0080               	movwf	0
   565  0079                     i1l774:
   566  0079  3001               	movlw	1
   567  007A  00F0               	movwf	??_ISR
   568  007B  0870               	movf	??_ISR,w
   569  007C  07F8               	addwf	_byteNumber,f
   570  007D                     i1l776:
   571                           
   572                           ;Main.c: 91: if (byteReceived[0] != 0xFF)
   573  007D  0A20               	incf	_byteReceived,w
   574  007E  1903               	btfsc	3,2
   575  007F  2881               	goto	u6_21
   576  0080  2882               	goto	u6_20
   577  0081                     u6_21:
   578  0081  2883               	goto	i1l780
   579  0082                     u6_20:
   580  0082                     i1l778:
   581                           
   582                           ;Main.c: 92: {;Main.c: 93: byteNumber = 0;
   583  0082  01F8               	clrf	_byteNumber
   584  0083                     i1l780:
   585                           
   586                           ;Main.c: 94: };Main.c: 96: RCIF = 0;
   587  0083  128C               	bcf	12,5	;volatile
   588  0084                     i1l74:
   589  0084  0873               	movf	??_ISR+3,w
   590  0085  008A               	movwf	10
   591  0086  0872               	movf	??_ISR+2,w
   592  0087  0084               	movwf	4
   593  0088  0E71               	swapf	??_ISR+1,w
   594  0089  0083               	movwf	3
   595  008A  0EFE               	swapf	btemp,f
   596  008B  0E7E               	swapf	btemp,w
   597  008C  0009               	retfie
   598  008D                     __end_of_ISR:
   599  007E                     btemp	set	126	;btemp
   600  007E                     wtemp0	set	126
   601                           
   602                           	psect	intentry
   603  0004                     __pintentry:	
   604                           ;incstack = 0
   605                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0]
   606                           
   607  0004                     interrupt_function:
   608  007E                     saved_w	set	btemp
   609  0004  00FE               	movwf	btemp
   610  0005  0E03               	swapf	3,w
   611  0006  00F1               	movwf	??_ISR+1
   612  0007  0804               	movf	4,w
   613  0008  00F2               	movwf	??_ISR+2
   614  0009  080A               	movf	10,w
   615  000A  00F3               	movwf	??_ISR+3
   616  000B  120A  118A  2869   	ljmp	_ISR
   617                           
   618                           	psect	config
   619                           
   620                           ;Config register CONFIG @ 0x2007
   621                           ;	Oscillator Selection bits
   622                           ;	FOSC = HS, HS oscillator
   623                           ;	Watchdog Timer Enable bit
   624                           ;	WDTE = OFF, WDT disabled
   625                           ;	Power-up Timer Enable bit
   626                           ;	PWRTE = ON, PWRT enabled
   627                           ;	Brown-out Reset Enable bit
   628                           ;	BOREN = OFF, BOR disabled
   629                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   630                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   631                           ;	Data EEPROM Memory Code Protection bit
   632                           ;	CPD = OFF, Data EEPROM code protection off
   633                           ;	Flash Program Memory Write Enable bits
   634                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   635                           ;	In-Circuit Debugger Mode bit
   636                           ;	DEBUG = 0x1, unprogrammed default
   637                           ;	Flash Program Memory Code Protection bit
   638                           ;	CP = OFF, Code protection off
   639  2007                     	org	8199
   640  2007  3F32               	dw	16178

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      0       7
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              4 COMMON     3     3      0
                       _UART_RX_Init
 ---------------------------------------------------------------------------------
 (1) _UART_RX_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_RX_Init

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      11       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       7       5        8.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      11      12        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Feb 21 18:00:32 2023

                     l60 0051                       l61 0053                       l56 0048  
                     l58 004D                       l67 00A0                       l59 004F  
                     u40 0040                       u41 003F                       u77 002C  
                    l730 0093                      l740 009C                      l732 0096  
                    l724 008D                      l742 009D                      l734 0099  
                    l726 0090                      l750 0036                      l736 009A  
                    l728 0092                      l760 0040                      l752 0037  
                    l744 0021                      l738 009B                      l762 0041  
                    l754 0038                      l746 0026                      l756 0039  
                    l748 0033                      l766 0055                      l758 003A  
                    _GIE 005F                      _RB0 0030                      _RB1 0031  
                    _RB2 0032                      _RB3 0033                      _RB4 0034  
                    _ISR 0069                      fsr0 0004                      indf 0000  
                   ?_ISR 0070                     _BRGH 04C2                     _CREN 00C4  
                   _PEIE 005E                     _RCIE 0465                     _RCIF 0065  
                   i1l74 0084                     _SPEN 00C7                     _SYNC 04C4  
                   _Data 0079                     u5_20 006F                     u5_21 006E  
                   u6_20 0082                     u6_21 0081                     _main 0021  
                   btemp 007E                     start 000E                    ??_ISR 0070  
                  ?_main 0070                    i1l770 006F                    i1l780 0083  
                  i1l772 0071                    i1l774 0079                    i1l776 007D  
                  i1l768 0069                    i1l778 0082                    _RCREG 001A  
                  _SPBRG 0099                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 0011             __end_of_main 0069  
                 ??_main 0074                   _TRISC6 043E                   _TRISC7 043F  
                 saved_w 007E  __end_of__initialization 001D           __pcstackCOMMON 0070  
             __pbssBANK0 0020               __pmaintext 0021               __pintentry 0004  
          ?_UART_RX_Init 0070               _byteNumber 0078                  __ptext1 008D  
                __ptext2 0069             __size_of_ISR 0024           ??_UART_RX_Init 0074  
   end_of_initialization 001D                _TRISBbits 0086      start_initialization 0011  
            __end_of_ISR 008D             _byteReceived 0020     __end_of_UART_RX_Init 00A1  
            __pbssCOMMON 0077                ___latbits 0002        interrupt_function 0004  
  __size_of_UART_RX_Init 0014             _UART_RX_Init 008D            __size_of_main 0048  
               intlevel1 0000              _UART_Buffer 0077  
